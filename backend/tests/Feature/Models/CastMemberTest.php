<?php

namespace Tests\Feature\Models;

use App\Model\CastMember;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CastMemberTest extends TestCase
{
    use DatabaseMigrations;

    private $castmember;

    public static function setUpBeforeClass(): void
    {
        // parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
    }

    public function setUp(): void
    {
        $this->category = new CastMember();
        parent::setUp();
    }

    public function testList()
    {
        factory(CastMember::class,1)->create();
        $castmembers = CastMember::all();
        $this->assertCount(1, $castmembers);
        $castmemberKeys = array_keys($castmembers->first()->getAttributes());

        $this->assertEqualsCanonicalizing([
            'id',
            'name',
            'type',
            'deleted_at',
            'created_at',
            'updated_at'

        ] ,
            $castmemberKeys);
    }

    public function testCreate()
    {
        $castmember = CastMember::create(['name' => 'test1']);
        $castmember->refresh();

        $this->assertEquals(36, strlen($castmember->id));
        $this->assertIsInt($castmember->type);

        $castmember = CastMember::create(['name' => 'test1', 'type' => 1]);
        $this->assertEquals(1, $castmember->type);

        $castmember = CastMember::create(['name' => 'test1', 'type' => 2]);
        $this->assertEquals(2, $castmember->type);


    }

    public function testUpdate()
    {
        $castmember = factory(CastMember::class)->create(['type' => 1]);

        $data = [
            'name' => 'test_name_updated',
            'type' => '2'
        ];

        $castmember->update($data);

        foreach ($data as $key => $value){
            $this->assertEquals($value, $castmember->{$key});
        }


    }

    public function testDelete()
    {
        $castmember = factory(CastMember::class)->create(['type' => 2]);
        $castmember->delete();

        $this->assertNull(CastMember::find($castmember->id));

        $castmember->restore();
        $this->assertNotNull(CastMember::find($castmember->id));

    }

}
