<?php


namespace Tests\Feature\Models\Video;


use App\Model\Category;
use App\Model\Genre;
use App\Model\Video;

class VideoCrudTest extends VideoBaseTestCase
{

    private $fileFieldsData = [];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        foreach (Video::$filesFields as $field){
            $this->fileFieldsData[$field] = $field . 'test';
        }
    }

    public function testList()
    {
        factory(Video::class,1)->create();
        $videos = Video::all();
        $this->assertCount(1, $videos);
        $videoKeys = array_keys($videos->first()->getAttributes());

        $this->assertEqualsCanonicalizing([
            'id',
            'title',
            'description',
            'year_launched',
            'opened',
            'rating',
            'duration',
            'deleted_at',
            'created_at',
            'updated_at',
            'video_file',
            'thumb_file',
            'banner_file',
            'trailer_file'

        ] ,
            $videoKeys);
    }

    public function testCreate()
    {

        $video = Video::create($this->data);

        $video->refresh();

        $this->assertEquals(36, strlen($video->id));
        $this->assertFalse($video->opened);
        $this->assertEquals('L', $video->rating);
        $this->assertEquals(2019, $video->year_launched);
        $this->assertEquals(9, $video->duration);


    }

    public function testCreateWithBasicFields()
    {
        $video = Video::create($this->data + $this->fileFieldsData);
        $video->refresh();

        $this->assertEquals(36, strlen($video->id));
        $this->assertFalse($video->opened);
        $this->assertEquals('L', $video->rating);
        $this->assertEquals(2019, $video->year_launched);
        $this->assertEquals(9, $video->duration);
        $this->assertDatabaseHas('videos', $this->data + ['opened' => false]);


        $video = Video::create( $this->data + ['opened' => true]);
        $this->assertTrue($video->opened);
        $this->assertDatabaseHas('videos', ['opened' => true]);
    }

    public function testCreateWithRelations()
    {
        $category = factory(Category::class)->create();
        $genre = factory(Genre::class)->create();
        $video = Video::create(
            $this->data + [
                'categories_id' => [$category->id],
                'genres_id' => [$genre->id]
            ]);



        $this->assertHasCategory($video->id, $category->id);
        $this->assertHasGenre($video->id, $genre->id);
    }

    public function testUpdateWithBasicFields()
    {
        $video = factory(Video::class)->create(['opened' => false]);

        $video->update($this->data +  $this->fileFieldsData);
        $this->assertFalse($video->opened);
        $this->assertDatabaseHas('videos', $this->data + ['opened' => false]);

        $video = factory(Video::class)->create(['opened' => false]);
        $video->update($this->data + $this->fileFieldsData +  ['opened' => true]);
        $this->assertTrue($video->opened);
        $this->assertDatabaseHas('videos', $this->data + ['opened' => true]);
    }

    public function testUpdateWithRelations()
    {
        $category = factory(Category::class)->create();
        $genre = factory(Genre::class)->create();
        $video = factory(Video::class)->create();

        $video->update(
            $this->data + [
                'categories_id' => [$category->id],
                'genres_id' => [$genre->id]
            ]
        );

        $this->assertHasCategory($video->id, $category->id);
        $this->assertHasGenre($video->id, $genre->id);
    }

    public function testHandleRelations()
    {
        $video = factory(Video::class)->create();
        Video::handleRelations($video, []);
        $this->assertCount(0, $video->categories);
        $this->assertCount(0, $video->genres);

        $category  =  factory(Category::class)->create();
        Video::handleRelations($video, ['categories_id' => [$category->id]]);
        $video->refresh();
        $this->assertCount(1, $video->categories);

        $genre  =  factory(Genre::class)->create();
        Video::handleRelations($video, ['genres_id' => [$genre->id]]);
        $video->refresh();
        $this->assertCount(1, $video->genres);

        $video->categories()->delete();
        $video->genres()->delete();

        Video::handleRelations($video, [
            'genres_id' => [$genre->id],
            'categories_id' => [$category->id]
        ]);
        $video->refresh();

        $this->assertCount(1, $video->categories);
        $this->assertCount(1, $video->genres);


    }

    public function testUpdate()
    {

        $video = factory(Video::class)->create(['opened' => false]);

        $data = [
            'title' => 'title',
            'description' => 'descriptin',
            'opened' => true,
            'year_launched' => 2019,
            'rating' => Video::RATING_LIST[0],
            'duration' => 9
        ];

        $video->update($data);

        foreach ($data as $key => $value){
            $this->assertEquals($value, $video->{$key});
        }


    }

    public function testDelete()
    {
        $video = factory(Video::class)->create(['opened' => false]);
        $video->delete();

        $this->assertNull(Video::find($video->id));

        $video->restore();
        $this->assertNotNull(Video::find($video->id));

    }

    private function assertHasCategory($video_id, $cagegory_id)
    {
        $this->assertDatabaseHas('category_video', ['video_id' => $video_id, 'category_id' => $cagegory_id]);
    }

    private function assertHasGenre($video_id, $genre_id)
    {
        $this->assertDatabaseHas('genre_video', ['video_id' => $video_id, 'genre_id' => $genre_id]);
    }
}
