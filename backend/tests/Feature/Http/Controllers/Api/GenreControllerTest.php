<?php

namespace Tests\Feature\Http\Controllers\Api;


use App\Http\Controllers\Api\GenreController;
use App\Http\Resources\GenreResource;
use App\Model\Category;
use App\Model\Genre;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Http\Request;
use Tests\Exceptions\TestException;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\Traits\TestResources;
use Tests\Traits\TestSaves;
use Tests\Traits\TestValidations;

class GenreControllerTest extends TestCase
{
    use DatabaseMigrations;


    use DatabaseMigrations, TestValidations, TestSaves, TestResources;

    protected $genre;
    private $sendData;
    protected $serializedFields = [
        'id',
        'name',
        'is_active',
        'created_at',
        'deleted_at',
        'updated_at',
        'categories'
    ];

    public  function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->genre = factory(Genre::class)->create();

        $this->sendData = [
            'name' => 'title',
            'is_active' => true,
        ];

    }

    public function testIndex()
    {

        $response = $this->get(route('genres.index'));
        $response->assertStatus(200)
            ->assertJsonStructure([
                'data' => [
                    '*' => $this->serializedFields
                ],
                'links' => [],
                'meta' => []
            ]);

        $resource = GenreResource::collection(collect([$this->genre]));
        $this->assertResource($response, $resource);
    }

    public function testShow()
    {

        $response = $this->get(route('genres.show', ['genre' => $this->genre->id]));
        $response->assertStatus(200);
        $id =  $this->genre->id;
        $resource = new GenreResource(Genre::find($id));
        $this->assertResource($response, $resource);
    }


    public function testInvalidateRequired()
    {
        $data = [
            'name' => '',
            'categories_id' =>  ''
        ];

        $this->assertValidationStoreAction($data, 'required');
        $this->assertValidationUpdateAction($data, 'required');

    }

    public function testInvalidateMax()
    {
        $data = [
            'name' => str_repeat('a',256),
        ];

        $this->assertValidationStoreAction($data,'max.string' ,   ['max' => 255]);
        $this->assertValidationUpdateAction($data,'max.string' ,  ['max' => 255]);

    }

    public function testInvalidateBoolean()
    {
        $data = [
            'is_active' => 'a',
        ];

        $this->assertValidationStoreAction($data,'boolean');
        $this->assertValidationUpdateAction($data,'boolean');

    }




    public function testInvalidateCategoriesIdField()
    {
        $data = [
            'categories_id' => 'a',
        ];

        $this->assertValidationStoreAction($data,'array');
        $this->assertValidationUpdateAction($data,'array');

        $data = [
            'categories_id' => [100],
        ];

        $this->assertValidationStoreAction($data,'exists');
        $this->assertValidationUpdateAction($data,'exists');

    }




    public function testSave()
    {

        $category = factory(Category::class)->create();

        $relations = ['categories_id' => [$category->id]];
        // $relations = [];
        $data = [
            [
                'send_data' => $this->sendData + $relations,
                'test_data' => $this->sendData + ['is_active' => false]
            ],
            [
                'send_data' => $this->sendData + ['is_active' => true] + $relations ,
                'test_data' => $this->sendData + ['is_active' => true]
            ],

        ];


        foreach ($data as $key => $value){

            $response = $this->assertStore($value['send_data'], $value['test_data'] + ['deleted_at' => null]);
            $response->assertJsonStructure([
                'data' =>  $this->serializedFields
            ]);

            $this->assertHasCategory(
                $response->json('data.id'),
                $value['send_data']['categories_id'][0]
            );

            $response = $this->assertUpdate($value['send_data'], $value['test_data'] + ['deleted_at' => null]);
            $response->assertJsonStructure([
                'data' =>  $this->serializedFields
            ]);

            $this->assertHasCategory(
                $response->json('data.id'),
                $value['send_data']['categories_id'][0]
            );
        }
    }

    public function testRollBackStore()
    {
        $controller = \Mockery::mock(GenreController::class)
            ->makePartial()
            ->shouldAllowMockingProtectedMethods();

        $controller->shouldReceive('validate')
            ->withAnyArgs()
            ->andReturn($this->sendData);

        $controller->shouldReceive('rulesStore')
            ->withAnyArgs()
            ->andReturn([]);

        $request = \Mockery::mock(Request::class);

        $controller->shouldReceive('handleRelations')
            ->once()
            ->andThrow(new TestException());

        $hasError = false;
        try {
            $controller->store($request);
        } catch (TestException $exception) {
            $this->assertCount(1, Genre::all());
            $hasError = true;
        }
        $this->assertTrue($hasError);
    }

    public function testRollBackUpdate()
    {
        $controller = \Mockery::mock(GenreController::class)
            ->makePartial()
            ->shouldAllowMockingProtectedMethods();

        $controller->shouldReceive('validate')
            ->withAnyArgs()
            ->andReturn($this->sendData);

        $controller->shouldReceive('findOrFail')
            ->withAnyArgs()
            ->andReturn($this->genre);


        $controller->shouldReceive('rulesUpdate')
            ->withAnyArgs()
            ->andReturn([]);

        $request = \Mockery::mock(Request::class);

        $controller->shouldReceive('handleRelations')
            ->once()
            ->andThrow(new TestException());


        try {
            $controller->update($request,  1);
        } catch (TestException $exception) {
            $this->assertCount(1, Genre::all());
        }

    }


    public function testDelete()
    {

        $response = $this->json('delete', route('genres.destroy',  ['genre' => $this->genre->id]));
        $response->assertStatus(204);


        $response = $this->get(route('genres.show', ['genre' => $this->genre->id]));
        $response->assertStatus(404);


        $this->genre->restore();

        $response = $this->get(route('genres.show', ['genre' => $this->genre->id]));
        $response->assertStatus(200);


    }

    public function testSyncCategories()
    {
        $categoriesId = factory(Category::class,3)->create()->pluck('id')->toArray();

        $sendData = [
           'name' => 'teste',
           'categories_id' =>  [$categoriesId[0]]
        ];

        $response = $this->json('POST', $this->routeStore(), $sendData);
        $this->assertDatabaseHas('category_genre',
           [
           'category_id' =>  $categoriesId[0],
           'genre_id' => $response->json('data.id')
           ]);

        $sendData = [
            'name' => 'teste',
            'categories_id' =>  [$categoriesId[1], $categoriesId[2]]
        ];

        $response = $this->json('PUT',
            route('genres.update', ['genre' => $response->json('data.id')]),
            $sendData
            );

        $this->assertDatabaseMissing('category_genre',
            [
                'genre_id' => $response->json('data.id'),
                'category_id' => $categoriesId[0]
            ]);

        $this->assertDatabaseHas('category_genre',
            [
                'genre_id' => $response->json('data.id'),
                'category_id' => $categoriesId[1]
            ]);

        $this->assertDatabaseHas('category_genre',
            [
                'genre_id' => $response->json('data.id'),
                'category_id' => $categoriesId[2]
            ]);
    }

    protected  function assertHasCategory($genreId, $categoryId)
    {
        $this->assertDatabaseHas('category_genre',
            [
                'category_id' => $categoryId,
                'genre_id' => $genreId
            ]
        );
    }

    protected function routeStore()
    {
        return route('genres.store');
    }

    protected function routeUpdate()
    {
        return route('genres.update', ['genre' => $this->genre->id]);
    }

    protected function model()
    {
        return Genre::class;
    }

}
