<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Http\Resources\CastMemberResource;
use App\Http\Resources\CategoryResource;
use App\Model\CastMember;
use App\Model\Category;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\Traits\TestResources;
use Tests\Traits\TestSaves;
use Tests\Traits\TestValidations;

class CastMemberControllerTest extends TestCase
{
    use DatabaseMigrations, TestValidations, TestSaves, TestResources;

    protected $castMember;
    protected $serializedFields = [
        'id',
        'name',
        'type',
        'created_at',
        'deleted_at',
        'updated_at'
    ];
    public  function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->castMember = factory(CastMember::class)->create();
    }

    public function testIndex()
    {

        $response = $this->get(route('cast_members.index'));
        $response->assertStatus(200)
            ->assertJsonStructure([
                'data' => [
                    '*' => $this->serializedFields
                ],
                'links' => [],
                'meta' => []
            ]);

        $resource = CastMemberResource::collection(collect([$this->castMember]));
        $this->assertResource($response, $resource);
    }

    public function testShow()
    {

        $response = $this->get(route('cast_members.show', ['cast_member' => $this->castMember->id]));
        $response->assertStatus(200);
        $id =  $this->castMember->id;
        $resource = new CastMemberResource(CastMember::find($id));
        $this->assertResource($response, $resource);
    }

    public function testInvalidateData()
    {

        $data  = [
            'name' => ''
        ];

        $this->assertValidationStoreAction($data, 'required');
        $this->assertValidationUpdateAction($data, 'required');

        $data  = [
            'name' => str_repeat('a', 256)
        ];

        $this->assertValidationStoreAction($data, 'max.string', ['max' => 255]);
        $this->assertValidationUpdateAction($data, 'max.string', ['max' => 255]);

        $data  = [
            'type' => 'a'
        ];

        $this->assertValidationStoreAction($data, 'integer');
        $this->assertValidationUpdateAction($data, 'integer');


    }



    public function testStore()
    {
        $data = [
            'name' => 'test',
            'type' => 1
        ];

        $response =  $this->assertStore($data, $data + ['deleted_at' => null]);
        $response->assertJsonStructure([
            'data' =>  $this->serializedFields
        ]);
        $data = [
            'name' => 'test',
            'type' => 2,

        ];

        $this->assertStore($data, $data + [ 'deleted_at' => null]);
        $id = $response->json('data.id');
        $resource = new CastMemberResource(CastMember::find($id));
        $this->assertResource($response, $resource);


    }

    public function testUpdate()
    {
        $this->castMember = factory(CastMember::class)->create([
            'type' => 1
        ]);

        $data = [
            'name' => 'test',
            'type' => 2
        ];

        $response =  $this->assertUpdate($data, $data + ['deleted_at' => null]);
        $response->assertJsonStructure([
            'data' =>  $this->serializedFields
        ]);

        $id = $response->json('data.id');
        $resource = new CastMemberResource(CastMember::find($id));
        $this->assertResource($response, $resource);

        $data = [
            'name' => 'test',
            'type' => 1,
        ];

        $this->assertUpdate($data, array_merge($data,  ['type' => 1]));





    }

    public function testDelete()
    {

        $response = $this->json('delete', route('cast_members.destroy',  ['cast_member' => $this->castMember->id]));
        $response->assertStatus(204);


        $response = $this->get(route('cast_members.show', ['cast_member' => $this->castMember->id]));
        $response->assertStatus(404);


        $this->castMember->restore();

        $response = $this->get(route('cast_members.show', ['cast_member' => $this->castMember->id]));
        $response->assertStatus(200);


    }

    protected function routeStore()
    {
        return route('cast_members.store');
    }

    protected function routeUpdate()
    {
        return route('cast_members.update', ['cast_member' => $this->castMember->id]);
    }

    protected function model()
    {
        return CastMember::class;
    }
}
